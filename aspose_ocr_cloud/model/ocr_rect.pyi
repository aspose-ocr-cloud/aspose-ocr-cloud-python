# coding: utf-8

"""
    Aspose OCR Cloud 5.0 API

    Aspose OCR Cloud 5.0 API  # noqa: E501

    The version of the OpenAPI document: 5.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aspose_ocr_cloud import schemas  # noqa: F401


class OCRRect(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents a rectangle: Left-Top (X1-Y1) to Right-Bottom (X2-Y2)
    """


    class MetaOapg:
        
        class properties:
            topLeftX = schemas.Int32Schema
            topLeftY = schemas.Int32Schema
            bottomRightX = schemas.Int32Schema
            bottomRightY = schemas.Int32Schema
            __annotations__ = {
                "topLeftX": topLeftX,
                "topLeftY": topLeftY,
                "bottomRightX": bottomRightX,
                "bottomRightY": bottomRightY,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topLeftX"]) -> MetaOapg.properties.topLeftX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topLeftY"]) -> MetaOapg.properties.topLeftY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bottomRightX"]) -> MetaOapg.properties.bottomRightX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bottomRightY"]) -> MetaOapg.properties.bottomRightY: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["topLeftX"], typing_extensions.Literal["topLeftY"], typing_extensions.Literal["bottomRightX"], typing_extensions.Literal["bottomRightY"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topLeftX"]) -> typing.Union[MetaOapg.properties.topLeftX, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topLeftY"]) -> typing.Union[MetaOapg.properties.topLeftY, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bottomRightX"]) -> typing.Union[MetaOapg.properties.bottomRightX, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bottomRightY"]) -> typing.Union[MetaOapg.properties.bottomRightY, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["topLeftX"], typing_extensions.Literal["topLeftY"], typing_extensions.Literal["bottomRightX"], typing_extensions.Literal["bottomRightY"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        topLeftX: typing.Union[MetaOapg.properties.topLeftX, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        topLeftY: typing.Union[MetaOapg.properties.topLeftY, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bottomRightX: typing.Union[MetaOapg.properties.bottomRightX, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bottomRightY: typing.Union[MetaOapg.properties.bottomRightY, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OCRRect':
        return super().__new__(
            cls,
            *_args,
            topLeftX=topLeftX,
            topLeftY=topLeftY,
            bottomRightX=bottomRightX,
            bottomRightY=bottomRightY,
            _configuration=_configuration,
        )
