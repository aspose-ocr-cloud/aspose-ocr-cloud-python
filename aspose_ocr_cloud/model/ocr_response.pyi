# coding: utf-8

"""
    Aspose OCR Cloud 5.0 API

    Aspose OCR Cloud 5.0 API  # noqa: E501

    The version of the OpenAPI document: 5.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aspose_ocr_cloud import schemas  # noqa: F401


class OCRResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response with Recognition result for specific task ID
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def responseStatusCode() -> typing.Type['ResponseStatusCode']:
                return ResponseStatusCode
        
            @staticmethod
            def taskStatus() -> typing.Type['OCRTaskStatus']:
                return OCRTaskStatus
            
            
            class results(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OCRResult']:
                        return OCRResult
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'results':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def error() -> typing.Type['OCRError']:
                return OCRError
            __annotations__ = {
                "id": id,
                "responseStatusCode": responseStatusCode,
                "taskStatus": taskStatus,
                "results": results,
                "error": error,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responseStatusCode"]) -> 'ResponseStatusCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskStatus"]) -> 'OCRTaskStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'OCRError': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["responseStatusCode"], typing_extensions.Literal["taskStatus"], typing_extensions.Literal["results"], typing_extensions.Literal["error"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responseStatusCode"]) -> typing.Union['ResponseStatusCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskStatus"]) -> typing.Union['OCRTaskStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> typing.Union[MetaOapg.properties.results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['OCRError', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["responseStatusCode"], typing_extensions.Literal["taskStatus"], typing_extensions.Literal["results"], typing_extensions.Literal["error"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        responseStatusCode: typing.Union['ResponseStatusCode', schemas.Unset] = schemas.unset,
        taskStatus: typing.Union['OCRTaskStatus', schemas.Unset] = schemas.unset,
        results: typing.Union[MetaOapg.properties.results, list, tuple, None, schemas.Unset] = schemas.unset,
        error: typing.Union['OCRError', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'OCRResponse':
        return super().__new__(
            cls,
            *_args,
            id=id,
            responseStatusCode=responseStatusCode,
            taskStatus=taskStatus,
            results=results,
            error=error,
            _configuration=_configuration,
        )

from aspose_ocr_cloud.model.ocr_error import OCRError
from aspose_ocr_cloud.model.ocr_result import OCRResult
from aspose_ocr_cloud.model.ocr_task_status import OCRTaskStatus
from aspose_ocr_cloud.model.response_status_code import ResponseStatusCode
